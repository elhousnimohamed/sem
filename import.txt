import json
import subprocess
import time
from collections import defaultdict, deque

def parse_state_file(state_file):
    with open(state_file, 'r') as f:
        state = json.load(f)
    
    resources = state.get("resources", [])
    dependencies = defaultdict(set)
    reverse_dependencies = defaultdict(set)
    resource_map = {}
    
    for resource in resources:
        if resource["mode"] == "data":  # Skip data resources
            continue
        
        for instance_index, instance in enumerate(resource.get("instances", [])):
            if "module" in resource:
                address = f"module.{resource.get('module', '')}.{resource['mode']}.{resource['type']}.{resource['name']}"
            else:
                address = f"{resource['mode']}.{resource['type']}.{resource['name']}"
            
            # Handle indexed resources
            if "index_key" in instance:
                address += f"[{instance['index_key']}]"
            elif len(resource["instances"]) > 1:
                address += f"[{instance_index}]"
            
            resource_map[address] = instance.get("attributes", {}).get("id", None)
            for dep in instance.get("dependencies", []):
                if dep in resource_map:  # Ensure the dependency exists before adding
                    dependencies[address].add(dep)
                    reverse_dependencies[dep].add(address)
    
    return resource_map, dependencies, reverse_dependencies

def topological_sort(resources, dependencies, reverse_dependencies):
    sorted_resources = []
    independent = deque([r for r in resources if r not in dependencies or not dependencies[r]])
    
    while independent:
        r = independent.popleft()
        sorted_resources.append(r)
        for dep in list(reverse_dependencies[r]):  # Avoid modifying dict during iteration
            dependencies[dep].discard(r)
            reverse_dependencies[r].discard(dep)
            if not dependencies[dep]:
                independent.append(dep)
        del resources[r]
    
    return sorted_resources

def import_resources(state_file):
    resource_map, dependencies, reverse_dependencies = parse_state_file(state_file)
    sorted_resources = topological_sort(resource_map.copy(), dependencies.copy(), reverse_dependencies.copy())
    
    for resource in sorted_resources:
        resource_id = resource_map.get(resource)
        if resource_id:
            cmd = f"terraform import {resource} {resource_id}"
            print(f"Executing: {cmd}")
            subprocess.run(cmd, shell=True)
            time.sleep(1)  # Prevent rate limiting or API throttling

def main():
    state_file = "terraform.tfstate"
    import_resources(state_file)

if __name__ == "__main__":
    main()
