import json
import subprocess
import time
from collections import defaultdict

def parse_state_file(state_file):
    with open(state_file, 'r') as f:
        state = json.load(f)
    
    resources = state.get("resources", [])
    dependencies = defaultdict(set)
    resource_map = {}
    
    for resource in resources:
        for instance in resource.get("instances", []):
            if "module" in resource:
                address = "module." + resource["module"] + "." + resource["mode"] + "." + resource["type"] + "." + resource["name"]
            else:
                address = resource["mode"] + "." + resource["type"] + "." + resource["name"]
            
            resource_map[address] = instance.get("attributes", {}).get("id", None)
            for dep in instance.get("dependencies", []):
                dependencies[address].add(dep)
    
    return resource_map, dependencies

def topological_sort(resources, dependencies):
    sorted_resources = []
    while resources:
        independent = [r for r in resources if not dependencies[r]]
        if not independent:
            raise Exception("Circular dependency detected in Terraform state file!")
        for r in independent:
            sorted_resources.append(r)
            del resources[r]
            for deps in dependencies.values():
                deps.discard(r)
    
    return sorted_resources

def import_resources(state_file):
    resource_map, dependencies = parse_state_file(state_file)
    sorted_resources = topological_sort(resource_map.copy(), dependencies.copy())
    
    for resource in sorted_resources:
        resource_id = resource_map[resource]
        if resource_id:
            cmd = f"terraform import {resource} {resource_id}"
            print(f"Executing: {cmd}")
            subprocess.run(cmd, shell=True)
            time.sleep(1)  # Prevent rate limiting or API throttling

def main():
    state_file = "terraform.tfstate"
    import_resources(state_file)

if __name__ == "__main__":
    main()
